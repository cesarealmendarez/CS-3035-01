--- Code ---
Explicit Declarations
1:

takeFromList :: [a] -> Int -> a

takeFromList xs n
    | null xs = error "List is empty"
    | n >= length xs = error "List index is not in range"
    | otherwise = xs !! n

main = do

    let myNumList = [1, 2, 3, 4]

    let numPos = takeFromList myNumList 2

    print numPos

    let myCharList = ['a', 'b', 'c', 'd']

    let charPos = takeFromList myCharList 2

    print charPos

2:

getSecondLast :: [a] -> a

getSecondLast [] = error "List is empty"
getSecondLast [x] = x
getSecondLast (x : _ : []) = x
getSecondLast (_ : xs) = getSecondLast xs

main = do

    print (getSecondLast [1, 2, 3, 4, 5])

    print (getSecondLast ['a', 'b', 'c', 'd', 'e'])

3:

third :: (a, b, c) -> c
third (_, _, x) = x

main = do
    
    print (third (1, 2, 3))

    print (third ("string", 10291, [False, True]))

Implicit Declarations

1:

takeFromList = (!!);

main = do

    let list = [2, 3, 4, 5, 6]
    let listElement = takeFromList list 2

    print listElement

2:

area :: Num a => a -> a -> a
area = (*)

main = do

    let l = 5
        w = 3
        a = area l w
        
    print a  

3:

makelist n = [1..n]

main = do

    print (makelist 19)

4:

checkNum :: Double -> Double -> Double -> Bool
checkNum a b c = c == sqrt (a * a + b * b)

main = do

    print (checkNum 3 4 5) 
    print (checkNum 2 3 4) 

5:

checkTriplets :: (Num a, Eq a) => a -> a -> a -> Bool
checkTriplets a b c
    | a * a + b * b == c * c = True
    | b * b + c * c == a * a = True
    | a * a + c * c == b * b = True
    | otherwise = False

main = do
    
    print (checkTriplets 3 4 5)

--- Output ---

Explicit Declarations
1:

3
'c'

2:

4
'd'

3:

3
[False,True]

Implicit Declarations

1:

4

2:

15

3:

[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]

4:

True
False

5:

True

